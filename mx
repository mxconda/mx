#!/bin/bash

if [[ "${BASH_SOURCE[0]}" != "${0}" ]]; then
    echo "This script is not meant to be sourced."
    return
fi

# it must work even if this file is called through nested symlinks
_this_file="$0"
while [ -h "$_this_file" ]; do
    _this_dir="$( cd -P "$( dirname "$_this_file" )" && pwd )"
    _this_file="$(readlink "$_this_file")"
    [[ $_this_file != /* ]] && _this_file="$_this_dir/$_this_file"
done
_this_dir=$(cd "$(dirname "$_this_file")" 2>/dev/null; pwd)
_cctbx_bin="$(dirname $_this_dir)/cctbx/build/bin"
_bin_dirs="$_this_dir:$_cctbx_bin"

export CONDARC="$(dirname "$_this_file")"/.condarc

# no args -> start subshell
if [ "$#" = 0 ]; then
    echo -e "\033[1;36mMXconda bash subshell.\033[0;36m Ctrl-D to exit.\033[0m"
    # On Mac bash in a new terminal window is a login shell, but not on Linux.
    # Thus different sets of init files are executed.
    # mx starts interactive, non-login shell. The easiest way to pass startup
    # commands to this shell is through --rcfile (the actual rcfile ~/.bashrc
    # is then sourced manually). But one problem remains on Mac.
    # A bash subshell started on vanilla OSX does not set things useful
    # for interactive shell such as PS1 and checkwinsize.
    # All these files can be customized and we cannot be sure of the content,
    # but as a simple heuristic: if PS1 has default value (\s-\v\$ ) we try
    # to manually source /etc/bashrc on Mac. It is not one of the files that
    # bash knows about - but it happens to have useful stuff.

    exec bash --rcfile \
        <(echo '[ -r $HOME/.bashrc ] && . $HOME/.bashrc
	        [ "$PS1" = "\\s-\\v\\$ " -a -r /etc/bashrc ] && . /etc/bashrc
                PS1="\033[0;36m(mx)\033[0m$PS1"
                PATH='"$_bin_dirs"':$PATH') \
        -i
fi

# subcommands
case "$1" in
install|remove|uninstall|update|upgrade|clean|info|search|list|config)
    exec "$_this_dir"/conda "$@"
    ;;
help|-h|--help)
    cat <<EOF
mx is a simple launcher script. If the first argument is one of:
install, remove, update, clean, info, search, list, config
then the package manager (conda) is run. Type "mx conda -h" for details.
With other arguments - the specified command is run.
With no arguments - new bash shell is started with MXconda in the PATH.
EOF
    exit
    ;;
esac

if [ -e "$_this_dir/$1" ] || [ -e "$_cctbx_bin/$1" ]; then
    PATH="$_bin_dirs:$PATH" exec "$@"
fi

echo "mx: $1: command not found..." >&2

case "$1" in
# programs with the same names as packages
coot|pymol|probe|reduce)
    echo "Hint: you need to install $1 first: mx install $1">&2
    ;;
dials.*|cctbx.*|mmtbx.*|xia2.*)
    [ ! -e "$_cctbx_bin/cctbx.python" ] && \
        echo "Hint: you need to install cctbx first: mx install cctbx">&2
    ;;
esac

exit 1
